name: Test and Coverage

on:
  push:
    branches: [ main, develop, feature/*, bugfix/*, release/* ]
  pull_request:
    branches: [ main, develop, feature/*, bugfix/*, release/* ]

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: "test-and-coverage"
  cancel-in-progress: false

jobs:
  test-loader:
    name: Test QDrant Loader
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e packages/qdrant-loader[dev]

      - name: Create .env.test file for loader
        run: |
          cd packages/qdrant-loader
          cp tests/.env.test.template tests/.env.test
          sed -i "s|QDRANT_URL=.*|QDRANT_URL=${{ secrets.QDRANT_URL }}|g" tests/.env.test
          sed -i "s|QDRANT_API_KEY=.*|QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}|g" tests/.env.test
          sed -i "s|QDRANT_COLLECTION_NAME=.*|QDRANT_COLLECTION_NAME=${{ secrets.QDRANT_COLLECTION_NAME }}|g" tests/.env.test
          sed -i "s|OPENAI_API_KEY=.*|OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}|g" tests/.env.test
          sed -i "s|REPO_TOKEN=.*|REPO_TOKEN=${{ secrets.REPO_TOKEN }}|g" tests/.env.test
          sed -i "s|REPO_URL=.*|REPO_URL=${{ secrets.REPO_URL }}|g" tests/.env.test
          sed -i "s|CONFLUENCE_TOKEN=.*|CONFLUENCE_TOKEN=${{ secrets.CONFLUENCE_TOKEN }}|g" tests/.env.test
          sed -i "s|CONFLUENCE_EMAIL=.*|CONFLUENCE_EMAIL=${{ secrets.CONFLUENCE_EMAIL }}|g" tests/.env.test
          sed -i "s|CONFLUENCE_URL=.*|CONFLUENCE_URL=${{ secrets.CONFLUENCE_URL }}|g" tests/.env.test
          sed -i "s|CONFLUENCE_SPACE_KEY=.*|CONFLUENCE_SPACE_KEY=${{ secrets.CONFLUENCE_SPACE_KEY }}|g" tests/.env.test
          sed -i "s|JIRA_TOKEN=.*|JIRA_TOKEN=${{ secrets.JIRA_TOKEN }}|g" tests/.env.test
          sed -i "s|JIRA_EMAIL=.*|JIRA_EMAIL=${{ secrets.JIRA_EMAIL }}|g" tests/.env.test
          sed -i "s|JIRA_URL=.*|JIRA_URL=${{ secrets.JIRA_URL }}|g" tests/.env.test
          sed -i "s|JIRA_PROJECT_KEY=.*|JIRA_PROJECT_KEY=${{ secrets.JIRA_PROJECT_KEY }}|g" tests/.env.test

      - name: Create config.test.yaml file for loader
        run: |
          cd packages/qdrant-loader
          cp tests/config.test.template.yaml tests/config.test.yaml

      - name: Run loader tests and generate coverage reports
        run: |
          cd packages/qdrant-loader
          python -m pytest tests/ --cov=src --cov-report=xml:../../coverage-loader.xml --cov-report=html:../../htmlcov-loader -v

      - name: Upload loader coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-loader
          path: |
            htmlcov-loader
            coverage-loader.xml

  test-mcp-server:
    name: Test MCP Server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e packages/qdrant-loader[dev]
          pip install -e packages/qdrant-loader-mcp-server[dev]

      - name: Run MCP server tests and generate coverage reports
        run: |
          cd packages/qdrant-loader-mcp-server
          python -m pytest tests/ --cov=src --cov-report=xml:../../coverage-mcp.xml --cov-report=html:../../htmlcov-mcp -v
        env:
          QDRANT_URL: ${{ secrets.QDRANT_URL }}
          QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
          QDRANT_COLLECTION_NAME: ${{ secrets.QDRANT_COLLECTION_NAME }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Upload MCP server coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-mcp
          path: |
            htmlcov-mcp
            coverage-mcp.xml

  combined-coverage:
    name: Combined Coverage Report
    runs-on: ubuntu-latest
    needs: [test-loader, test-mcp-server]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e packages/qdrant-loader[dev]
          pip install -e packages/qdrant-loader-mcp-server[dev]
          pip install coverage[toml]

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          merge-multiple: false

      - name: Combine coverage reports
        run: |
          # Check what coverage files we have
          echo "=== Root directory contents ==="
          ls -la || true
          
          echo "=== Looking for coverage directories ==="
          find . -name "coverage-*" -type d || true
          
          echo "=== Looking for HTML coverage files ==="
          find . -name "index.html" || true
          
          echo "=== Looking for XML coverage files ==="
          find . -name "*.xml" || true
          
          # Artifacts are downloaded into separate directories when merge-multiple is false
          # Look for coverage directories
          if [ -d "coverage-loader" ]; then
            echo "Found loader coverage directory"
            echo "Contents of coverage-loader:"
            ls -la coverage-loader/ || true
            # Copy HTML coverage files
            if [ -d "coverage-loader/htmlcov-loader" ]; then
              cp -r coverage-loader/htmlcov-loader htmlcov
            else
              cp -r coverage-loader htmlcov
            fi
            echo "Using loader HTML coverage report"
          elif [ -d "coverage-mcp" ]; then
            echo "Found MCP coverage directory"
            echo "Contents of coverage-mcp:"
            ls -la coverage-mcp/ || true
            # Copy HTML coverage files  
            if [ -d "coverage-mcp/htmlcov-mcp" ]; then
              cp -r coverage-mcp/htmlcov-mcp htmlcov
            else
              cp -r coverage-mcp htmlcov
            fi
            echo "Using MCP HTML coverage report"
          else
            echo "No HTML coverage reports found, creating empty directory"
            mkdir -p htmlcov
            echo "<html><body><h1>No coverage reports available</h1></body></html>" > htmlcov/index.html
          fi
          
          # Handle XML reports if they exist (these would be inside the artifact directories)
          if [ -f "coverage-loader/coverage-loader.xml" ] && [ -f "coverage-mcp/coverage-mcp.xml" ]; then
            # Create a simple combined XML (just use the loader one as primary)
            cp coverage-loader/coverage-loader.xml coverage.xml
            echo "Combined coverage reports"
          elif [ -f "coverage-loader/coverage-loader.xml" ]; then
            cp coverage-loader/coverage-loader.xml coverage.xml
            echo "Using loader coverage report"
          elif [ -f "coverage-mcp/coverage-mcp.xml" ]; then
            cp coverage-mcp/coverage-mcp.xml coverage.xml
            echo "Using MCP coverage report"
          fi
          
          echo "=== Final htmlcov directory contents ==="
          ls -la htmlcov/ || true

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload combined coverage artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: htmlcov

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: combined-coverage
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
