name: Documentation Website (Auto)

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'README.md'
      - 'RELEASE_NOTES.md'
      - 'packages/*/README.md'
      - 'website/**'
      - '.github/workflows/docs-auto.yml'
  workflow_run:
    workflows: ["Test and Coverage"]
    types:
      - completed
    branches: [ main ]
  release:
    types: [published]
    # Only trigger on main package releases, not MCP server releases

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: "docs-auto-${{ github.ref }}"
  cancel-in-progress: false

jobs:
  check-release:
    name: Check if this is a main package release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Check release tag
        id: check
        run: |
          # Only deploy docs for main qdrant-loader releases, not MCP server releases
          if [[ "${{ github.event.release.tag_name }}" == qdrant-loader-v* ]]; then
            echo "✅ Main package release detected: ${{ github.event.release.tag_name }}"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "⏭️  MCP server or other release detected: ${{ github.event.release.tag_name }}"
            echo "📋 Skipping documentation deployment to avoid duplicates"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  build-docs:
    name: Build Documentation Website
    runs-on: ubuntu-latest
    needs: [check-release]
    if: |
      (github.event_name != 'release') || 
      (github.event_name == 'release' && needs.check-release.outputs.should-deploy == 'true')
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install monorepo packages locally first to avoid PyPI resolution issues
          pip install -e packages/qdrant-loader-core[openai]
          pip install -e .[dev]
          pip install -e packages/qdrant-loader
          pip install -e ".[docs]"

      - name: Generate favicons
        run: |
          python website/assets/generate_favicons.py

      - name: Get latest test workflow run ID
        if: github.event_name == 'release'
        id: get-workflow-run
        run: |
          echo "🔍 Finding latest successful test workflow run on main branch..."
          
          # Get the latest successful workflow run for "Test and Coverage" on main branch
          WORKFLOW_RUN=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows" \
            | jq -r '.workflows[] | select(.name == "Test and Coverage") | .id')
          
          if [ "$WORKFLOW_RUN" = "null" ] || [ -z "$WORKFLOW_RUN" ]; then
            echo "❌ Could not find 'Test and Coverage' workflow"
            exit 1
          fi
          
          LATEST_RUN=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$WORKFLOW_RUN/runs?branch=main&status=completed&conclusion=success&per_page=1" \
            | jq -r '.workflow_runs[0].id')
          
          if [ "$LATEST_RUN" = "null" ] || [ -z "$LATEST_RUN" ]; then
            echo "❌ No successful test runs found on main branch"
            echo "⚠️  Continuing without test artifacts for release"
            echo "workflow_run_id=" >> $GITHUB_OUTPUT
          else
            echo "✅ Found latest successful test run: $LATEST_RUN"
            echo "workflow_run_id=$LATEST_RUN" >> $GITHUB_OUTPUT
          fi

      - name: Get latest test results (from workflow_run trigger)
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          name: test-status-${{ github.event.workflow_run.id }}
          path: test-results/
        continue-on-error: true

      - name: Get latest test results (from release trigger)
        if: github.event_name == 'release' && steps.get-workflow-run.outputs.workflow_run_id != ''
        uses: actions/download-artifact@v4
        with:
          name: test-status-${{ steps.get-workflow-run.outputs.workflow_run_id }}
          path: test-results/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.get-workflow-run.outputs.workflow_run_id }}
        continue-on-error: true

      - name: Get latest coverage reports (from workflow_run trigger)
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*-${{ github.event.workflow_run.id }}
          path: coverage-artifacts/
          merge-multiple: false
        continue-on-error: true

      - name: Get latest coverage reports (from release trigger)
        if: github.event_name == 'release' && steps.get-workflow-run.outputs.workflow_run_id != ''
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*-${{ steps.get-workflow-run.outputs.workflow_run_id }}
          path: coverage-artifacts/
          merge-multiple: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.get-workflow-run.outputs.workflow_run_id }}
        continue-on-error: true

      - name: Build website using templates
        run: |
          echo "🚀 Building website using template system"
          python website/build.py \
            --output site \
            --templates website/templates \
            --coverage-artifacts coverage-artifacts/ \
            --test-results test-results/ \
            --base-url ""

      - name: Verify website build
        run: |
          echo "=== Website Build Verification ==="
          echo "📁 Site directory contents:"
          find site -type f -name "*.html" | head -10
          echo ""
          echo "📊 Total files built: $(find site -type f | wc -l)"
          echo "📄 HTML pages: $(find site -name "*.html" | wc -l)"
          echo "📁 Directories: $(find site -type d | wc -l)"
          
          # Check if main pages exist
          if [ -f "site/index.html" ]; then
            echo "✅ Homepage built successfully"
          else
            echo "❌ Homepage missing"
            exit 1
          fi
          
          if [ -f "site/docs/index.html" ]; then
            echo "✅ Documentation index built successfully"
          else
            echo "❌ Documentation index missing"
            exit 1
          fi
          
          if [ -f "site/coverage/index.html" ]; then
            echo "✅ Coverage index built successfully"
          else
            echo "❌ Coverage index missing"
            exit 1
          fi

      - name: Upload site artifact
        uses: actions/upload-artifact@v4
        with:
          name: website-auto-${{ github.run_id }}
          path: site
          retention-days: 30

      - name: Setup Pages (for deployment)
        if: github.event_name == 'release' && needs.check-release.outputs.should-deploy == 'true'
        uses: actions/configure-pages@v4

      - name: Upload site artifact for Pages (for deployment)
        if: github.event_name == 'release' && needs.check-release.outputs.should-deploy == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [check-release, build-docs]
    if: |
      needs.build-docs.result == 'success' && 
      github.event_name == 'release' && 
      needs.check-release.outputs.should-deploy == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [check-release, build-docs]
    if: always()
    steps:
      - name: Report build status
        run: |
          echo "=== Documentation Build Summary (Auto) ==="
          echo "Build Status: ${{ needs.build-docs.result }}"
          echo "Event: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          
          # Check if this was a release event and if we should deploy
          if [ "${{ github.event_name }}" = "release" ]; then
            if [ "${{ needs.check-release.result }}" = "success" ] && [ "${{ needs.check-release.outputs.should-deploy }}" = "true" ]; then
              echo "📦 Release Type: Main package (qdrant-loader)"
              echo "🚀 Documentation deployment enabled"
            else
              echo "📦 Release Type: MCP server or other"
              echo "⏭️  Documentation deployment skipped to avoid duplicates"
            fi
          fi
          
          if [ "${{ needs.build-docs.result }}" = "success" ]; then
            echo "✅ Website built successfully"
            echo "📦 Artifact: website-auto-${{ github.run_id }}"
            
            # Check deployment status
            if [ "${{ github.event_name }}" = "release" ] && [ "${{ needs.check-release.result }}" = "success" ] && [ "${{ needs.check-release.outputs.should-deploy }}" = "true" ]; then
              echo "🚀 Deployed automatically (main package release)"
            else
              echo "📋 Built but not deployed"
            fi
          elif [ "${{ needs.build-docs.result }}" = "skipped" ]; then
            echo "⏭️  Website build skipped (MCP server or other release)"
          else
            echo "❌ Website build failed"
            exit 1
          fi 